name: joan-test-secret-workflow
# global environment variables to all jobs
env: 
  TEST_BRANCH: v1.9.0
  VERSION: v1.9.0
  REGION: us-west-2
  DIST_OUTPUT_BUCKET: msam-dev
  SOLUTION_NAME: aws-media-services-application-mapper
on: 
  push:
    paths-ignore:
    - 'docs/**'
    - '**/*.md'
    - '**/*.txt'
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # use a specific environment for this build that has secrets defined and protection rules in place, if needed
    environment: test_env_var 
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
            aws-region: ${{ env.REGION }}
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Run build script
        run: |
          cd deployment
          ./build-s3-dist.sh $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION
      - name: Deploy to S3
        run: |
          cd $RUNNER_WORKSPACE/$SOLUTION_NAME/deployment
          # if we're building master, deploy this like a release
          # if not, deploy as dev
          ./deploy.sh -b $DIST_OUTPUT_BUCKET -s $SOLUTION_NAME -v $VERSION -r us-west-2 -a none -t release
  master-branch-deploy-test:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    # use a specific environment for this build that has secrets defined and protection rules in place, if needed
    environment: test_install_env
    if: github.ref == 'refs/heads/v1.9.0'
    steps:
      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.INSTALL_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.INSTALL_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.REGION }}
      - name: Create CloudFormation stack based on last job's build
        run: |
          TEMPLATE="https://$DIST_OUTPUT_BUCKET-$REGION.s3-$REGION.amazonaws.com/$SOLUTION_NAME/latest/$SOLUTION_NAME-release.template"
          echo $TEMPLATE
          PART_SHA=${GITHUB_SHA:0:7}
          response="$( aws cloudformation create-stack --stack-name MSAM-test-master-$PART_SHA --template-url $TEMPLATE --region $REGION --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback )"
          echo $response
